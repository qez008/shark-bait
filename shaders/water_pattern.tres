[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

render_mode cull_back, diffuse_burley, specular_toon;

uniform sampler2D noise_pattern;

uniform vec4 fill_color : hint_color = vec4(vec3(0.1), 1.0);
uniform vec4 line_color : hint_color = vec4(vec3(0.5), 1.0);

uniform sampler2D nTexture : hint_black;

varying vec2 vertPos;

void vertex() {
	vec3 ns = texture(nTexture, UV).rgb * 1.6;
	vertPos = VERTEX.xz / 2.0;
	VERTEX.y = VERTEX.y + (ns.z*0.9 * NORMAL.y);
}


// https://www.ronja-tutorials.com/post/026-perlin-noise/
float surf(vec2 uv) {
    float x = texture(noise_pattern, vec2(uv.x, uv.y + TIME * 0.02)).x;
    float y = texture(noise_pattern, vec2(uv.x + TIME * 0.019, uv.y)).x;
    float noise = texture(noise_pattern, vec2(x, y)).x;
    noise = fract(noise * 6.0);
    float pixelNoiseChange = fwidth(noise);
    float heightLine = smoothstep(1.0 - pixelNoiseChange, 1.0, noise);
    heightLine += smoothstep(pixelNoiseChange, 0.0, noise);
    
    return heightLine;
   }

void fragment() {
//    float surf = surf(UV);
//    vec4 color = (1.0 - surf) * fill_color + surf * line_color;
//    ALBEDO = color.xyz;

    mediump vec3 ns = texture(nTexture, UV).rgb; //noise_texture(from Viewport)
	mediump vec3 fFac = smoothstep(vec3(0.8), vec3(0.4), ns); //foam_factor
	mediump float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
	mediump vec3 col_1 = vec3(0.0, 0.1, 0.3);
	mediump vec3 col_2 = vec3(0.1, 0.3, 0.4);
	mediump vec3 col_3 = vec3(0.4, 0.8, 0.8);
	mediump vec3 col_4 = vec3(0.8, 0.9, 0.9);
	//Color_ramp
	mediump vec3 col = mix(mix(col_1, col_2, ns*0.6), mix(col_3, col_4, ns*1.2), smoothstep(0.0, 1.0, ns));
	mediump vec3 fCol = clamp(mix(vec3(0.999), col, fFac), 0.0, 1.0); //final_color
	//fCol *= min(clamp(mix(vec3(1.0), vec3(0.2, 0.4, 0.6), fFac), 0.0, 1.0), 1.0);
	ALBEDO = min(fCol + (0.1 * fresnel), 1.0);
	SPECULAR = 0.2 * fresnel;
	ROUGHNESS = mix(0.9, 0.7, fFac.z) * (1.0 - fresnel*0.2);
	TRANSMISSION = vec3(0.2, 0.7, 0.3);
}
"
