[gd_scene load_steps=18 format=2]

[ext_resource path="res://shaders/gertsnerwaves.gdshader" type="Shader" id=1]
[ext_resource path="res://src/test_boat/TestBoat.tscn" type="PackedScene" id=2]
[ext_resource path="res://shaders/water_pattern.tres" type="Shader" id=3]
[ext_resource path="res://src/waves.gd" type="Script" id=4]
[ext_resource path="res://src/floater.gd" type="Script" id=5]

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 1 )
shader_param/grid_color = Color( 0, 0.7, 1, 1 )
shader_param/fill_color = Color( 0.0745098, 0.0745098, 0.0745098, 1 )
shader_param/wave_a = Vector3( 1.61, 74.956, 0.116 )
shader_param/wave_b = Vector3( 1.994, 36.31, 0.156 )
shader_param/wave_c = Vector3( 1.266, 21.954, 0.152 )
shader_param/wave_d = Vector3( 1.508, 12.934, 0.212 )
shader_param/synced_time = 0.0
shader_param/wave_offset = Vector3( 0, 0, 0 )

[sub_resource type="PlaneMesh" id=3]
material = SubResource( 11 )
size = Vector2( 300, 300 )
subdivide_width = 200
subdivide_depth = 200

[sub_resource type="SphereMesh" id=6]
radius = 0.2
height = 0.4

[sub_resource type="ViewportTexture" id=20]
viewport_path = NodePath("Viewport")

[sub_resource type="OpenSimplexNoise" id=16]
period = 32.0
persistence = 0.1

[sub_resource type="NoiseTexture" id=17]
width = 256
height = 1
seamless = true
noise = SubResource( 16 )

[sub_resource type="ShaderMaterial" id=15]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/fill_color = Color( 0.156863, 0.341176, 0.4, 1 )
shader_param/line_color = Color( 0.168627, 0.788235, 0.701961, 1 )
shader_param/noise_pattern = SubResource( 17 )
shader_param/nTexture = SubResource( 20 )

[sub_resource type="QuadMesh" id=13]
material = SubResource( 15 )
size = Vector2( 40, 40 )

[sub_resource type="Shader" id=18]
code = "shader_type canvas_item;
render_mode unshaded;


// Author @patriciogv - 2015
// http://patriciogonzalezvivo.com

uniform sampler2D noisetex;
uniform int NUM_OCTAVES = 5;
uniform vec2 u_resolution;

float random (in vec2 _st) {
    return fract(sin(dot(_st.xy, vec2(12.9898,78.233))) * 43758.5453123);
}

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 _st) {
    vec2 i = floor(_st);
    vec2 f = fract(_st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    vec2 u = f * f * (3.0 - 2.0 * f);

    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}


float fbm ( in vec2 _st) {
    float v = 0.0;
    float a = 0.5;
    vec2 shift = vec2(100.0);
    // Rotate to reduce axial bias
    mat2 rot = mat2( vec2(cos(0.5), sin(0.5)) , vec2(-sin(0.5), cos(0.50)) );
    for (int i = 0; i < NUM_OCTAVES; ++i) {
        v += a * noise(_st);
        _st = rot * _st * 2.0 + shift;
        a *= 0.5;
    }
    return v;
}

void fragment() {
    vec2 st = UV / u_resolution.xy * 3.0;
    vec3 color = vec3(0.0);

    vec2 q = vec2(0.);
    q.x = fbm( st + 0.00 * TIME);
    q.y = fbm( st + vec2(1.0));

    vec2 r = vec2(0.);
    r.x = fbm( st + 1.0 * q + vec2(1.7,9.2) + 0.15 * TIME);
    r.y = fbm( st + 1.0 * q + vec2(8.3,2.8) + 0.126 * TIME);

    float f = fbm(st+r);

    color = mix( vec3(0.101961, 0.619608, 0.666667) , vec3(0.666667, 0.666667, 0.498039) , clamp((f * f) * 4.0, 0.0, 1.0) );
    color = mix( color , vec3(0.0, 0.0, 0.164706) , clamp(length(q), 0.0, 1.0) );
//    color = mix( color, vec3(0.666667, 1.0, 1.0), clamp(abs(r.x), 0.0, ï£¿1.0) );
    color = mix( color , vec3(0.666667, 1.0, 1.0) , clamp(abs(r.x), 0.0, 1.0) );
    
    COLOR = vec4((f*f*f+.6*f*f+.5*f) * color, 1.0);
}"

[sub_resource type="OpenSimplexNoise" id=21]

[sub_resource type="NoiseTexture" id=22]
seamless = true
noise = SubResource( 21 )

[sub_resource type="ShaderMaterial" id=19]
shader = SubResource( 18 )
shader_param/NUM_OCTAVES = 5
shader_param/u_resolution = null
shader_param/noisetex = SubResource( 22 )

[node name="ocean_test" type="Spatial"]

[node name="ocean_mesh" type="MeshInstance" parent="."]
mesh = SubResource( 3 )
material/0 = null
script = ExtResource( 4 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 0.532256, 0.846583, 0, -0.846583, 0.532256, 0, 3.1185, 1.58938 )
light_energy = 0.371

[node name="floater" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 27.9987, 0, -0.809572 )
mesh = SubResource( 6 )
material/0 = null
script = ExtResource( 5 )

[node name="floater2" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 29.6816, 0, -0.809572 )
mesh = SubResource( 6 )
material/0 = null
script = ExtResource( 5 )

[node name="floater3" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 27.9987, 0, 0.87098 )
mesh = SubResource( 6 )
material/0 = null
script = ExtResource( 5 )

[node name="floater4" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 29.6816, 0, 0.87098 )
mesh = SubResource( 6 )
material/0 = null
script = ExtResource( 5 )

[node name="InterpolatedCamera" type="InterpolatedCamera" parent="."]
transform = Transform( -4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, -3.9123, 1.47195, 0 )
current = true
fov = 82.0
target = NodePath("../TestBoat/camera_rotor/camera_target")
speed = 2.0
enabled = true

[node name="TestBoat" parent="." instance=ExtResource( 2 )]
angular_damp = 4.0
camera_yaw = true

[node name="test_mesh" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, -4.37114e-08, 1, 0, -1, -4.37114e-08, 0.012007, 3.61504, -0.679625 )
mesh = SubResource( 13 )
material/0 = null

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 512, 512 )
hdr = false
usage = 0

[node name="ColorRect" type="ColorRect" parent="Viewport"]
material = SubResource( 19 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 40.0
margin_bottom = 40.0

[editable path="TestBoat"]
